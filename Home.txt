// ignore_for_file: prefer_const_constructors, unnecessary_new, unused_field, unused_local_variable, avoid_print, unused_import, prefer_final_fields, prefer_const_literals_to_create_immutables

import 'package:app_flutter/models/user_model.dart';
import 'package:app_flutter/screen/member.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../utils/user_provider.dart';
import 'login.dart';

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {
  late bool _loginSuccess; // กำหดตัวแปรสถานะการล็อกอิน
// ส่วนของตัวแปรข้อมูลพื้นฐาน
  Usermodel? _user;
  String _id = '';
  String _firstname = '';
  String _lastname = '';
  @override
  void initState() {
    super.initState();
    loadSettings(); // เรียกใช้งานตั้งค่าเมื่อเริ่มต้นเป็นฟังก์ชั่น ให้รองรับ async
  }

  // ตั้งค่าเริ่มต้น
  void loadSettings() async {
    // ใช้งาน provider
    UserProvider userProvider = context.read<UserProvider>();
    _loginSuccess =
        await userProvider.getLoginStatus(); // ถึงสถานะการล็อกอิน ถ้ามี
    if (_loginSuccess) {
      fetchUser(); // ดึงข้อมูลของผู้ใช้ ถ้าล็อกอินอยู่
    }
  }

  // ฟังก์ชั่นสำหรับดึงข้อมูลผู้ใช้
  void fetchUser() async {
    // ใช้งาน provider
    UserProvider userProvider = context.read<UserProvider>();
    setState(() {
      _loginSuccess = true;
      print('Loginstatus{$_loginSuccess}');
    });
    // ดึงข้อมูลทั่วไปของผู้ใช้
    _user = await userProvider.getUser();
    _id = _user!.memberId;
    _firstname = _user!.firstName;
    _lastname = _user!.lastName;
  }

  @override
  Widget build(BuildContext context) {
    // ใช้งาน provider
    UserProvider userProvider = context.read<UserProvider>();
    return Scaffold(
/*       appBar: AppBar(
        actions: [
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 15),
            child: Icon(Icons.notifications),
          )
        ],
        title: Text("Home"),
        elevation: 0,
        backgroundColor: Colors.blue,
      ), */
      body: Container(
        width: double.infinity,
        decoration: BoxDecoration(
          gradient: LinearGradient(begin: Alignment.topCenter, colors: [
            Color.fromARGB(255, 5, 131, 227),
            Color.fromARGB(255, 76, 164, 227),
            Color.fromARGB(255, 38, 134, 218)
          ]),
        ),
        child: Column(
          children: <Widget>[
            SizedBox(
              height: 80,
            ),
            Center(
              child: Text(
                "Member",
                style: TextStyle(color: Colors.white, fontSize: 40),
              ),
            ),
            SizedBox(
              height: 10,
            ),
            Center(
              child: Text(
                "Welcome to Inside Android",
                style: TextStyle(color: Colors.white, fontSize: 18),
              ),
            ),
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(60),
                      topRight: Radius.circular(60),
                    )),
                child: FutureBuilder<bool>(
                    future: userProvider.getLoginStatus(),
                    builder: (context, snapshot) {
                      if (snapshot.hasData) {
                        return Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: <Widget>[
                              Text('Profile Screen'),
                              Visibility(
                                // ส่วนที่แสดงกรณีล็อกอินแล้ว
                                visible:
                                    _loginSuccess, // ใช้สถานะการล็อกอินกำหนดกรแสดง
                                child: Column(
                                  children: [
                                    FlutterLogo(
                                      size: 100,
                                    ),
                                    Text('Welcome $_firstname $_lastname'),
                                    //Text(_email), // แสดงอีเมล
                                    ElevatedButton(
                                      onPressed: () async {
                                        // เมื่อล็อกเอาท์
                                        // ทำการออกจากระบบ
                                        await userProvider.logout();
                                        setState(() {
                                          _loginSuccess = false;
                                        });
                                      },
                                      child: Text('Logout'),
                                    ),
                                    //Text(_email), // แสดงอีเมล
                                    ElevatedButton(
                                      onPressed: () async {
                                        Navigator.push(
                                            // ไปหน้าล็อกอิน
                                            context,
                                            MaterialPageRoute(
                                              builder: (context) => Member(),
                                              settings: RouteSettings(
                                                  arguments: null),
                                            ));
                                      },
                                      child: Text('GO TO MEMBER'),
                                    ),
                                  ],
                                ),
                              ),
                              Visibility(
                                visible: !_loginSuccess,
                                child: ElevatedButton(
                                    onPressed: () async {
                                      // กำหดให้รอค่า หลังจากเปิดไปหน้า lgoin
                                      final result = await Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                            builder: (context) => Login(),
                                            settings:
                                                RouteSettings(arguments: null),
                                          ));

                                      // ถ้ามีการปิดหน้มที่เปิด และส่งค่ากลับมาเป็น true
                                      if (result == true) {
                                        // ทำคำสั่งดึงข้อมูลผู้ใช้ เมื่อล็อกอินผ่าน
                                        fetchUser();
                                      }
                                    },
                                    child: Text('Go to Login')),
                              ),
                            ],
                          ),
                        );
                      } else if (snapshot.hasError) {
                        return Text('${snapshot.error}');
                      }
                      return const CircularProgressIndicator();
                    }),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CustomScrollingWidget extends StatefulWidget {
  const CustomScrollingWidget({Key? key}) : super(key: key);

  @override
  State createState() => _CustomScrollingWidgetState();
}

class _CustomScrollingWidgetState extends State {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: CustomScrollView(
        slivers: [
          const SliverAppBar(
            pinned: true,
            expandedHeight: 250.0,
            flexibleSpace: FlexibleSpaceBar(
              title: Text('CustomScrollView'),
              centerTitle: true,
            ),
          ),
          SliverToBoxAdapter(
            child: Container(
              color: Colors.tealAccent,
              alignment: Alignment.center,
              height: 200,
              child: const Text('This is Container'),
            ),
          ),
          SliverGrid(
            gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(
              maxCrossAxisExtent: 200.0,
              mainAxisSpacing: 10.0,
              crossAxisSpacing: 10.0,
              childAspectRatio: 4.0,
            ),
            delegate: SliverChildBuilderDelegate(
              (BuildContext context, int index) {
                return Container(
                  alignment: Alignment.center,
                  color: Colors.teal[100 * (index % 9)],
                  child: Text('Grid Item $index'),
                );
              },
              childCount: 20,
            ),
          ),
          SliverToBoxAdapter(
            child: Container(
              color: Colors.amberAccent,
              alignment: Alignment.center,
              height: 200,
              child: const Text('This is Container'),
            ),
          ),
          SliverToBoxAdapter(
            child: SizedBox(
              height: 100.0,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: 10,
                itemBuilder: (context, index) {
                  return SizedBox(
                    width: 100.0,
                    child: Card(
                      color: Colors.cyan[100 * (index % 9)],
                      child: Text('Item $index'),
                    ),
                  );
                },
              ),
            ),
          ),
          SliverFixedExtentList(
            itemExtent: 50.0,
            delegate: SliverChildBuilderDelegate(
              (BuildContext context, int index) {
                return Container(
                  alignment: Alignment.center,
                  color: Colors.lightBlue[100 * (index % 9)],
                  child: Text('List Item $index'),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
